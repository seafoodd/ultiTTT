generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  email                  String          @unique
  password               String
  username               String          @unique
  displayName            String
  location               String?
  dateOfBirth            DateTime?
  avatarUrl              String          @default("/media/default_images/default-avatar.png")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  elo                    Float           @default(1000)
  rd                     Float           @default(200)
  vol                    Float           @default(0.06)
  gameHistory1           Game[]          @relation("Player1Games")
  gameHistory2           Game[]          @relation("Player2Games")
  friendships1           Friend[]        @relation("User1Friends")
  friendships2           Friend[]        @relation("User2Friends")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model Friend {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1     User     @relation("User1Friends", fields: [user1Id], references: [id])
  user1Id   String   @db.ObjectId
  user2     User     @relation("User2Friends", fields: [user2Id], references: [id])
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String   @db.ObjectId
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Game {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  board            Json
  winner           String?
  winnerId         String?  @db.ObjectId
  moveHistory      Json
  createdAt        DateTime @default(now())
  player1          User?    @relation("Player1Games", fields: [player1Id], references: [id], onDelete: SetNull)
  player1Id        String?  @db.ObjectId
  player1Elo       Int
  player1EloChange Int
  player2          User?    @relation("Player2Games", fields: [player2Id], references: [id], onDelete: SetNull)
  player2Id        String?  @db.ObjectId
  player2Elo       Int
  player2EloChange Int
}
